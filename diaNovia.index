<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>¬°Rasca y Gana del Amor! ‚ù§Ô∏è</title>
    <!-- Tailwind CSS CDN para un estilo moderno y responsive -->
    <script src="https://cdn.tailwindcss.com"></script>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;600;700&display=swap" rel="stylesheet">
    <style>
        body {
            font-family: 'Inter', sans-serif;
            background: linear-gradient(to right top, #ffc0cb, #ffb6c1, #ffacd7, #ff9ee8, #ff90f9); /* Fondo degradado rosa */
            min-height: 100vh;
            display: flex;
            flex-direction: column;
            justify-content: center;
            align-items: center;
            padding: 20px;
            color: #4a5568; /* Color de texto oscuro */
            overflow: hidden; /* Evitar scroll si los elementos se desbordan */
        }
        .card-container {
            position: relative;
            width: 320px; /* Ancho fijo para la tarjeta */
            height: 200px; /* Alto fijo para la tarjeta */
            background-color: #fef2f2; /* Fondo muy claro para la tarjeta */
            border-radius: 20px;
            box-shadow: 0 15px 25px -5px rgba(0, 0, 0, 0.2), 0 8px 10px -6px rgba(0, 0, 0, 0.1); /* Sombra m√°s pronunciada */
            display: flex;
            justify-content: center;
            align-items: center;
            overflow: hidden; /* Asegura que el contenido interno no se salga */
        }
        .hidden-message {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            display: flex;
            flex-direction: column;
            justify-content: center;
            align-items: center;
            text-align: center;
            padding: 20px;
            font-size: 1.5rem; /* Tama√±o de fuente para el mensaje */
            font-weight: bold;
            color: #ef4444; /* Rojo para el mensaje de amor */
            background: linear-gradient(45deg, #fef2f2, #fee2e2); /* Ligero degradado para el mensaje */
            z-index: 1; /* Detr√°s del canvas */
        }
        .hidden-message ul {
            list-style: none;
            padding: 0;
            margin-top: 10px;
        }
        .hidden-message li {
            margin-bottom: 5px;
            font-size: 1.2rem;
            color: #be123c; /* Rojo m√°s oscuro para los vales */
        }
        canvas {
            position: absolute;
            top: 0;
            left: 0;
            z-index: 2; /* Encima del mensaje oculto */
            cursor: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24"><path fill="currentColor" d="M19.3 8.3c-.4-.4-1-.4-1.4 0L12 14.2l-5.9-5.9c-.4-.4-1-.4-1.4 0s-.4 1 0 1.4l6.6 6.6c.2.2.4.3.7.3s.5-.1.7-.3l6.6-6.6c.4-.4.4-1 0-1.4z"/></svg>') 12 12, auto; /* Cursor de "rascar" */
            border-radius: 20px; /* Bordes redondeados para el canvas */
        }

        /* Responsive adjustments */
        @media (min-width: 640px) { /* sm breakpoint */
            .card-container {
                width: 400px;
                height: 250px;
            }
            .hidden-message {
                font-size: 1.8rem;
            }
            .hidden-message li {
                font-size: 1.4rem;
            }
        }
        @media (min-width: 768px) { /* md breakpoint */
            .card-container {
                width: 500px;
                height: 300px;
            }
            .hidden-message {
                font-size: 2.2rem;
            }
            .hidden-message li {
                font-size: 1.6rem;
            }
        }
        @media (min-width: 1024px) { /* lg breakpoint */
            .card-container {
                width: 600px;
                height: 350px;
            }
            .hidden-message {
                font-size: 2.5rem;
            }
            .hidden-message li {
                font-size: 1.8rem;
            }
        }
    </style>
</head>
<body class="flex flex-col items-center justify-center min-h-screen p-5">

    <div class="bg-white p-6 md:p-8 lg:p-10 rounded-2xl shadow-xl text-center max-w-4xl w-full mb-8">
        <h1 class="text-3xl md:text-4xl lg:text-5xl font-bold text-pink-500 mb-4">
            ¬°Rasca y Gana del Amor! üíñ
        </h1>
        <p class="text-lg md:text-xl text-gray-700 mb-6">
            Rasca la tarjeta para descubrir un mensaje especial o un vale de amor. ¬°Espero que te guste, mi vida!
        </p>
    </div>

    <div class="card-container" id="scratchCardContainer">
        <div class="hidden-message" id="hiddenMessage">
            <p>¬°Para mi amorcito!</p>
            <ul>
                <li>‚ú® Un masaje relajante</li>
                <li>üé¨ Noche de pelis a tu elecci√≥n</li>
                <li>‚òï Desayuno en la cama</li>
                <li>ü§ó Un abrazo gigante</li>
                <li>üé∂ Tu canci√≥n favorita, dedicada</li>
            </ul>
            <p class="mt-4">¬°Te amo con todo mi coraz√≥n!</p>
        </div>
        <canvas id="scratchCanvas"></canvas>
    </div>

    <button id="resetButton"
            class="mt-8 px-6 py-3 bg-pink-500 hover:bg-pink-600 text-white font-bold rounded-full shadow-lg
                   transition duration-300 ease-in-out transform hover:scale-105 focus:outline-none focus:ring-2 focus:ring-pink-400 focus:ring-opacity-75">
        Reiniciar Tarjeta
    </button>

    <script>
        const canvas = document.getElementById('scratchCanvas');
        const ctx = canvas.getContext('2d');
        const scratchCardContainer = document.getElementById('scratchCardContainer');
        const resetButton = document.getElementById('resetButton');

        let isScratching = false; // Bandera para saber si se est√° rascando
        const scratchRadius = 20; // Radio del "borrador"

        /**
         * Ajusta el tama√±o del canvas para que coincida con su contenedor.
         */
        function resizeCanvas() {
            canvas.width = scratchCardContainer.clientWidth;
            canvas.height = scratchCardContainer.clientHeight;
            drawScratchLayer(); // Redibujar la capa de rascado al redimensionar
        }

        /**
         * Dibuja la capa inicial que se va a "rascar".
         */
        function drawScratchLayer() {
            ctx.clearRect(0, 0, canvas.width, canvas.height); // Limpiar cualquier dibujo anterior
            ctx.fillStyle = '#a0aec0'; // Color gris para la capa de rascado
            ctx.fillRect(0, 0, canvas.width, canvas.height);

            // Opcional: A√±adir un patr√≥n o texto encima de la capa rascable
            ctx.font = 'bold 24px Inter';
            ctx.fillStyle = '#cbd5e0'; /* Gris m√°s claro para el texto de la capa */
            ctx.textAlign = 'center';
            ctx.textBaseline = 'middle';
            ctx.fillText('¬°RASCA AQU√ç!', canvas.width / 2, canvas.height / 2);
        }

        /**
         * Obtiene las coordenadas del rat√≥n/toque relativas al canvas.
         * @param {Event} event - El evento del rat√≥n o toque.
         * @returns {Object} Un objeto con las propiedades x e y.
         */
        function getCoordinates(event) {
            const rect = canvas.getBoundingClientRect();
            let x, y;

            if (event.touches) { // Para eventos t√°ctiles
                x = event.touches[0].clientX - rect.left;
                y = event.touches[0].clientY - rect.top;
            } else { // Para eventos de rat√≥n
                x = event.clientX - rect.left;
                y = event.clientY - rect.top;
            }
            return { x, y };
        }

        /**
         * Inicia el rascado cuando el rat√≥n/toque se presiona.
         * @param {Event} e - El evento.
         */
        function startScratch(e) {
            isScratching = true;
            const { x, y } = getCoordinates(e);
            revealArea(x, y);
        }

        /**
         * Contin√∫a el rascado mientras el rat√≥n/toque se mueve.
         * @param {Event} e - El evento.
         */
        function scratch(e) {
            if (!isScratching) return;
            e.preventDefault(); // Prevenir el scroll en dispositivos t√°ctiles
            const { x, y } = getCoordinates(e);
            revealArea(x, y);
        }

        /**
         * Detiene el rascado cuando el rat√≥n/toque se suelta.
         */
        function stopScratch() {
            isScratching = false;
        }

        /**
         * Revela un √°rea circular en el canvas.
         * @param {number} x - Coordenada X del centro del c√≠rculo.
         * @param {number} y - Coordenada Y del centro del c√≠rculo.
         */
        function revealArea(x, y) {
            ctx.globalCompositeOperation = 'destination-out'; // Modo para "borrar"
            ctx.beginPath();
            ctx.arc(x, y, scratchRadius, 0, Math.PI * 2);
            ctx.fill();
        }

        // --- Event Listeners ---
        // Redimensionar el canvas al cargar y al cambiar el tama√±o de la ventana
        window.addEventListener('load', resizeCanvas);
        window.addEventListener('resize', resizeCanvas);

        // Eventos de rat√≥n
        canvas.addEventListener('mousedown', startScratch);
        canvas.addEventListener('mousemove', scratch);
        canvas.addEventListener('mouseup', stopScratch);
        canvas.addEventListener('mouseleave', stopScratch); // Detener si el rat√≥n sale del canvas

        // Eventos t√°ctiles
        canvas.addEventListener('touchstart', startScratch, { passive: false });
        canvas.addEventListener('touchmove', scratch, { passive: false });
        canvas.addEventListener('touchend', stopScratch);
        canvas.addEventListener('touchcancel', stopScratch);

        // Bot√≥n de reiniciar
        resetButton.addEventListener('click', drawScratchLayer);

        // Inicializar la capa de rascado al cargar la p√°gina
        drawScratchLayer();
    </script>
</body>
</html>
